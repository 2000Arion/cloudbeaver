
####################################################
# General stuff
####################################################

# Async types

type AsyncTaskInfo {
    id: String!
    name: String
    running: Boolean!

    status: String
    error: ServerError

    result: SQLExecuteInfo
    # Task result.
    # Can be some kind of identifier to obtain real result using another API function
    taskResult: Object
}

# Various server errors descriptor

type ServerError {
    message: String
    errorCode: String
    stackTrace: String
    causedBy: ServerError
}

type ServerMessage {
    time: String
    message: String
}

# Languages supported by server

type ServerLanguage {
    isoCode: String!
    displayName: String
    nativeName: String
}

type WebServiceConfig {
    id: String!
    name: String!
    description: String!
    bundleVersion: String!
}

type ServerConfig {
    name: String!
    version: String!

    anonymousAccessEnabled: Boolean
    authenticationEnabled: Boolean
    supportsPredefinedConnections: Boolean
    supportsProvidedConnections: Boolean
    supportsCustomConnections: Boolean
    supportsConnectionBrowser: Boolean
    supportsWorkspaces: Boolean

    supportedLanguages: [ ServerLanguage! ]!
    services: [ WebServiceConfig ]
    productConfiguration: Object!
}

type SessionInfo {
    createTime: String!
    lastAccessTime: String!
    locale: String!

    cacheExpired: Boolean!

    serverMessages: [ ServerMessage ]
    connections: [ ConnectionInfo! ]!
}

####################################################
# Drivers and connections
####################################################

type DriverInfo {
    id: ID!
    name: String
    description: String
    icon: String
    iconBig: String

    # Driver provider ID
    providerId: ID
    # Driver Java class name
    driverClassName: String
    defaultPort: String
    sampleURL: String
    driverInfoURL: String
    driverPropertiesURL: String
    embedded: Boolean

    # this fields must be removed and be replaced by DriverAuthModel
    anonymousAccess: Boolean @deprecated
    allowsEmptyPassword: Boolean @deprecated

    licenseRequired: Boolean
    license: String
    custom: Boolean
    # Driver score for ordering, biggest first
    promotedScore: Int

    # Never used?
    connectionProperties: Object
    defaultConnectionProperties: Object

    # Driver properties.
    # Note: it is expensive property and it may produce database server roundtrips.
    # Call it only when you really need it.
    driverProperties: [DriverPropertyInfo]
    driverParameters: Object

    authModels: [DriverAuthModel!]!
    # Can be null? (only anonymous access)
    defaultAuthModelId: ID
}

type DriverPropertyInfo {
    id: ID!
    displayName: String
    description: String
    category: String
    dataType: String
    defaultValue: Object
    validValues: [ Object ]
}

# Data source info is a description of some remote database. Doesn't include user credentials
type DataSourceInfo  @deprecated {
    id: ID!
    driverId: ID!
    name: String!
    description: String

    host: String
    server: String
    port: String
    url: String
    properties: String
}

# Configuration of particular connection. Used for new connection create. Includes auth info
input ConnectionConfig {
    driverId: ID
    name: String
    description: String

    # ID of predefined datasource
    dataSourceId: ID @deprecated

    # Custom connection parameters (all optional)

    host: String
    port: String
    databaseName: String
    # Connection url jdbc:{driver}://{host}[:{port}]/[{database}]
    url: String
    # Properties
    properties: Object

    # User credentials

    userName: String @deprecated
    userPassword: String @deprecated

    authModelId: ID
    credentials: Object
}

type DriverAuthParameter {
    id: ID!
    displayName: String!
    description: String
    
    # if true and possibleValues not empty field must be shown as combo box
    customValue: Boolean!
    # if array not empty field must be shown as selector
    possibleValues: [String!]!
    # field must be encrypted somehow
    encrypted: Boolean!
    # field can't be null or not set
    requred: Boolean!
}

type DriverAuthModel {
    authModelId: ID!
    # By default auth requred
    authRequred: Boolean!
    parameters: [DriverAuthParameter!]!
}

# Connection instance
type ConnectionInfo {
    id: ID!
    driverId: ID!

    name: String!
    description: String
    properties: String

    connected: Boolean!
    provided: Boolean!
    connectTime: String
    connectionError: ServerError
    serverVersion: String
    clientVersion: String

    # Overrides authRequred parameter of DriverAuthModel
    authRequred: Boolean!
    # Can be null? (anonymous access)
    authModelId: ID

    # Supported features (provided etc)
    features: [ String! ]!
}

type LogEntry {
    time: DateTime
    type: String!
    message: String
    stackTrace: String
}

####################################################
# Main API
####################################################

extend type Query {
    # Returns server config
    serverConfig: ServerConfig!

    # Returns session state ( initialize if not )
    sessionState: SessionInfo!

    # Session permissions
    sessionPermissions: [ID]!

    # Get driver info
    driverList( id: ID ): [ DriverInfo! ]!

    # Get list of predefined data sources
    dataSourceList: [ DataSourceInfo! ]! @deprecated

    # Get predefined connections 
    predefinedConnections: [ ConnectionInfo! ]!

    # Return connection state
    connectionState( id: ID! ): ConnectionInfo! @deprecated

    # Return connection info
    connectionInfo( id: ID! ): ConnectionInfo!

    readSessionLog(maxEntries: Int, clearEntries: Boolean): [ LogEntry! ]!

}

extend type Mutation {
    # Initialize session
    openSession: SessionInfo!

    # Destroy session
    closeSession: Boolean

    # Refreshes session on server and returns its state
    touchSession: Boolean

    # Refreshes session on server and returns its state
    changeSessionLanguage(locale: String): Boolean

    # Create new connection
    createConnection( config: ConnectionConfig! ): ConnectionInfo!

    # Test connection configuration. Returns remote server version
    testConnection( config: ConnectionConfig! ): ConnectionInfo!

    # Connect to database
    openConnection( config: ConnectionConfig! ): ConnectionInfo! @deprecated

    # Connect to database
    openConnectionNew( id: ID!, authModelId: ID, credentials: Object ): ConnectionInfo!

    # Disconnect from database
    closeConnection( id: ID! ): Boolean! @deprecated

    # Disconnect from database
    closeConnectionNew( id: ID! ): ConnectionInfo!

    # Remove connection and disconnects from the database if needed
    deleteConnection( id: ID! ): Boolean!

    #### Generic async functions

    asyncTaskCancel(id: String!): Boolean

    asyncTaskStatus(id: String!): AsyncTaskInfo!

}

